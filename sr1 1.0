import networkx as nx
import matplotlib.pyplot as plt
from collections import deque
import warnings

def bfs(graph, start_node):
    visited = set()
    queue = deque([start_node])
    order = []

    while queue:
        node = queue.popleft()
        if node not in visited:
            visited.add(node)
            order.append(node)
            neighbors = graph[node]
            for neighbor in neighbors:
                if neighbor not in visited:
                    queue.append(neighbor)

    return order

def draw_graph(graph, bfs_order):
    pos = nx.spring_layout(graph)  # positions for all nodes

    plt.figure(figsize=(8, 6))

    # Draw nodes
    nx.draw_networkx_nodes(graph, pos, node_size=500, node_color='lightblue')

    # Draw edges
    nx.draw_networkx_edges(graph, pos, edgelist=graph.edges(), width=2, alpha=0.5, edge_color='black')

    # Draw labels
    nx.draw_networkx_labels(graph, pos, font_size=12, font_color='black')

    # Highlight BFS path
    bfs_edges = [(bfs_order[i], bfs_order[i + 1]) for i in range(len(bfs_order) - 1)]
    nx.draw_networkx_edges(graph, pos, edgelist=bfs_edges, width=2, edge_color='red')

    plt.title("Breadth-First Search (BFS) Traversal")
    plt.show()

# Example graph
G = nx.Graph()
edges = [
    (1, 2), (1, 3), (2, 4), (2, 5), 
    (3, 6), (3, 7), (4, 8), (5, 8),
    (6, 9), (7, 9), (8, 10), (9, 10)
]
G.add_edges_from(edges)

# Perform BFS
start_node = 1
bfs_order = bfs(G, start_node)
print("BFS Order:", bfs_order)

# Ignore DeprecationWarning
with warnings.catch_warnings():
    warnings.simplefilter("ignore", category=DeprecationWarning)
    # Draw the graph with BFS path highlighted
    draw_graph(G, bfs_order)
